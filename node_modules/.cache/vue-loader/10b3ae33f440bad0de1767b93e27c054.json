{"remainingRequest":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/views/tool/build/DraggableItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/views/tool/build/DraggableItem.vue","mtime":1590989844000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport draggable from 'vuedraggable'\r\nimport render from '@/utils/generator/render'\r\n\r\nconst components = {\r\n  itemBtns(h, element, index, parent) {\r\n    const { copyItem, deleteItem } = this.$listeners\r\n    return [\r\n      <span class=\"drawing-item-copy\" title=\"复制\" onClick={event => {\r\n        copyItem(element, parent); event.stopPropagation()\r\n      }}>\r\n        <i class=\"el-icon-copy-document\" />\r\n      </span>,\r\n      <span class=\"drawing-item-delete\" title=\"删除\" onClick={event => {\r\n        deleteItem(index, parent); event.stopPropagation()\r\n      }}>\r\n        <i class=\"el-icon-delete\" />\r\n      </span>\r\n    ]\r\n  }\r\n}\r\nconst layouts = {\r\n  colFormItem(h, element, index, parent) {\r\n    const { activeItem } = this.$listeners\r\n    let className = this.activeId === element.formId ? 'drawing-item active-from-item' : 'drawing-item'\r\n    if (this.formConf.unFocusedComponentBorder) className += ' unfocus-bordered'\r\n    return (\r\n      <el-col span={element.span} class={className}\r\n        nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\r\n        <el-form-item label-width={element.labelWidth ? `${element.labelWidth}px` : null}\r\n          label={element.label} required={element.required}>\r\n          <render key={element.renderKey} conf={element} onInput={ event => {\r\n            this.$set(element, 'defaultValue', event)\r\n          }} />\r\n        </el-form-item>\r\n        {components.itemBtns.apply(this, arguments)}\r\n      </el-col>\r\n    )\r\n  },\r\n  rowFormItem(h, element, index, parent) {\r\n    const { activeItem } = this.$listeners\r\n    const className = this.activeId === element.formId ? 'drawing-row-item active-from-item' : 'drawing-row-item'\r\n    let child = renderChildren.apply(this, arguments)\r\n    if (element.type === 'flex') {\r\n      child = <el-row type={element.type} justify={element.justify} align={element.align}>\r\n              {child}\r\n            </el-row>\r\n    }\r\n    return (\r\n      <el-col span={element.span}>\r\n        <el-row gutter={element.gutter} class={className}\r\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\r\n          <span class=\"component-name\">{element.componentName}</span>\r\n          <draggable list={element.children} animation={340} group=\"componentsGroup\" class=\"drag-wrapper\">\r\n            {child}\r\n          </draggable>\r\n          {components.itemBtns.apply(this, arguments)}\r\n        </el-row>\r\n      </el-col>\r\n    )\r\n  }\r\n}\r\n\r\nfunction renderChildren(h, element, index, parent) {\r\n  if (!Array.isArray(element.children)) return null\r\n  return element.children.map((el, i) => {\r\n    const layout = layouts[el.layout]\r\n    if (layout) {\r\n      return layout.call(this, h, el, i, element.children)\r\n    }\r\n    return layoutIsNotFound()\r\n  })\r\n}\r\n\r\nfunction layoutIsNotFound() {\r\n  throw new Error(`没有与${this.element.layout}匹配的layout`)\r\n}\r\n\r\nexport default {\r\n  components: {\r\n    render,\r\n    draggable\r\n  },\r\n  props: [\r\n    'element',\r\n    'index',\r\n    'drawingList',\r\n    'activeId',\r\n    'formConf'\r\n  ],\r\n  render(h) {\r\n    const layout = layouts[this.element.layout]\r\n\r\n    if (layout) {\r\n      return layout.call(this, h, this.element, this.index, this.drawingList)\r\n    }\r\n    return layoutIsNotFound()\r\n  }\r\n}\r\n",null]}