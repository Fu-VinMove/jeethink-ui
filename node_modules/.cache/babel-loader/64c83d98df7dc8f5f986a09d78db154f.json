{"remainingRequest":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/thread-loader/dist/cjs.js!/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/babel-loader/lib/index.js!/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/utils/generator/js.js","dependencies":[{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/utils/generator/js.js","mtime":1590989844000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { isArray } from 'util';\nimport { exportDefault, titleCase } from '@/utils/index';\nimport { trigger } from \"./config\";\nvar units = {\n  KB: '1024',\n  MB: '1024 / 1024',\n  GB: '1024 / 1024 / 1024'\n};\nvar confGlobal;\nvar inheritAttrs = {\n  file: '',\n  dialog: 'inheritAttrs: false,'\n};\nexport function makeUpJs(conf, type) {\n  confGlobal = conf = JSON.parse(JSON.stringify(conf));\n  var dataList = [];\n  var ruleList = [];\n  var optionsList = [];\n  var propsList = [];\n  var methodList = mixinMethod(type);\n  var uploadVarList = [];\n  conf.fields.forEach(function (el) {\n    buildAttributes(el, dataList, ruleList, optionsList, methodList, propsList, uploadVarList);\n  });\n  var script = buildexport(conf, type, dataList.join('\\n'), ruleList.join('\\n'), optionsList.join('\\n'), uploadVarList.join('\\n'), propsList.join('\\n'), methodList.join('\\n'));\n  confGlobal = null;\n  return script;\n}\n\nfunction buildAttributes(el, dataList, ruleList, optionsList, methodList, propsList, uploadVarList) {\n  buildData(el, dataList);\n  buildRules(el, ruleList);\n\n  if (el.options && el.options.length) {\n    buildOptions(el, optionsList);\n\n    if (el.dataType === 'dynamic') {\n      var model = \"\".concat(el.vModel, \"Options\");\n      var options = titleCase(model);\n      buildOptionMethod(\"get\".concat(options), model, methodList);\n    }\n  }\n\n  if (el.props && el.props.props) {\n    buildProps(el, propsList);\n  }\n\n  if (el.action && el.tag === 'el-upload') {\n    uploadVarList.push(\"\".concat(el.vModel, \"Action: '\").concat(el.action, \"',\\n      \").concat(el.vModel, \"fileList: [],\"));\n    methodList.push(buildBeforeUpload(el));\n\n    if (!el['auto-upload']) {\n      methodList.push(buildSubmitUpload(el));\n    }\n  }\n\n  if (el.children) {\n    el.children.forEach(function (el2) {\n      buildAttributes(el2, dataList, ruleList, optionsList, methodList, propsList, uploadVarList);\n    });\n  }\n}\n\nfunction mixinMethod(type) {\n  var list = [];\n  var minxins = {\n    file: confGlobal.formBtns ? {\n      submitForm: \"submitForm() {\\n        this.$refs['\".concat(confGlobal.formRef, \"'].validate(valid => {\\n          if(!valid) return\\n          // TODO \\u63D0\\u4EA4\\u8868\\u5355\\n        })\\n      },\"),\n      resetForm: \"resetForm() {\\n        this.$refs['\".concat(confGlobal.formRef, \"'].resetFields()\\n      },\")\n    } : null,\n    dialog: {\n      onOpen: 'onOpen() {},',\n      onClose: \"onClose() {\\n        this.$refs['\".concat(confGlobal.formRef, \"'].resetFields()\\n      },\"),\n      close: \"close() {\\n        this.$emit('update:visible', false)\\n      },\",\n      handelConfirm: \"handelConfirm() {\\n        this.$refs['\".concat(confGlobal.formRef, \"'].validate(valid => {\\n          if(!valid) return\\n          this.close()\\n        })\\n      },\")\n    }\n  };\n  var methods = minxins[type];\n\n  if (methods) {\n    Object.keys(methods).forEach(function (key) {\n      list.push(methods[key]);\n    });\n  }\n\n  return list;\n}\n\nfunction buildData(conf, dataList) {\n  if (conf.vModel === undefined) return;\n  var defaultValue;\n\n  if (typeof conf.defaultValue === 'string' && !conf.multiple) {\n    defaultValue = \"'\".concat(conf.defaultValue, \"'\");\n  } else {\n    defaultValue = \"\".concat(JSON.stringify(conf.defaultValue));\n  }\n\n  dataList.push(\"\".concat(conf.vModel, \": \").concat(defaultValue, \",\"));\n}\n\nfunction buildRules(conf, ruleList) {\n  if (conf.vModel === undefined) return;\n  var rules = [];\n\n  if (trigger[conf.tag]) {\n    if (conf.required) {\n      var type = isArray(conf.defaultValue) ? 'type: \\'array\\',' : '';\n      var message = isArray(conf.defaultValue) ? \"\\u8BF7\\u81F3\\u5C11\\u9009\\u62E9\\u4E00\\u4E2A\".concat(conf.vModel) : conf.placeholder;\n      if (message === undefined) message = \"\".concat(conf.label, \"\\u4E0D\\u80FD\\u4E3A\\u7A7A\");\n      rules.push(\"{ required: true, \".concat(type, \" message: '\").concat(message, \"', trigger: '\").concat(trigger[conf.tag], \"' }\"));\n    }\n\n    if (conf.regList && isArray(conf.regList)) {\n      conf.regList.forEach(function (item) {\n        if (item.pattern) {\n          rules.push(\"{ pattern: \".concat(eval(item.pattern), \", message: '\").concat(item.message, \"', trigger: '\").concat(trigger[conf.tag], \"' }\"));\n        }\n      });\n    }\n\n    ruleList.push(\"\".concat(conf.vModel, \": [\").concat(rules.join(','), \"],\"));\n  }\n}\n\nfunction buildOptions(conf, optionsList) {\n  if (conf.vModel === undefined) return;\n\n  if (conf.dataType === 'dynamic') {\n    conf.options = [];\n  }\n\n  var str = \"\".concat(conf.vModel, \"Options: \").concat(JSON.stringify(conf.options), \",\");\n  optionsList.push(str);\n}\n\nfunction buildProps(conf, propsList) {\n  if (conf.dataType === 'dynamic') {\n    conf.valueKey !== 'value' && (conf.props.props.value = conf.valueKey);\n    conf.labelKey !== 'label' && (conf.props.props.label = conf.labelKey);\n    conf.childrenKey !== 'children' && (conf.props.props.children = conf.childrenKey);\n  }\n\n  var str = \"\".concat(conf.vModel, \"Props: \").concat(JSON.stringify(conf.props.props), \",\");\n  propsList.push(str);\n}\n\nfunction buildBeforeUpload(conf) {\n  var unitNum = units[conf.sizeUnit];\n  var rightSizeCode = '';\n  var acceptCode = '';\n  var returnList = [];\n\n  if (conf.fileSize) {\n    rightSizeCode = \"let isRightSize = file.size / \".concat(unitNum, \" < \").concat(conf.fileSize, \"\\n    if(!isRightSize){\\n      this.$message.error('\\u6587\\u4EF6\\u5927\\u5C0F\\u8D85\\u8FC7 \").concat(conf.fileSize).concat(conf.sizeUnit, \"')\\n    }\");\n    returnList.push('isRightSize');\n  }\n\n  if (conf.accept) {\n    acceptCode = \"let isAccept = new RegExp('\".concat(conf.accept, \"').test(file.type)\\n    if(!isAccept){\\n      this.$message.error('\\u5E94\\u8BE5\\u9009\\u62E9\").concat(conf.accept, \"\\u7C7B\\u578B\\u7684\\u6587\\u4EF6')\\n    }\");\n    returnList.push('isAccept');\n  }\n\n  var str = \"\".concat(conf.vModel, \"BeforeUpload(file) {\\n    \").concat(rightSizeCode, \"\\n    \").concat(acceptCode, \"\\n    return \").concat(returnList.join('&&'), \"\\n  },\");\n  return returnList.length ? str : '';\n}\n\nfunction buildSubmitUpload(conf) {\n  var str = \"submitUpload() {\\n    this.$refs['\".concat(conf.vModel, \"'].submit()\\n  },\");\n  return str;\n}\n\nfunction buildOptionMethod(methodName, model, methodList) {\n  var str = \"\".concat(methodName, \"() {\\n    // TODO \\u53D1\\u8D77\\u8BF7\\u6C42\\u83B7\\u53D6\\u6570\\u636E\\n    this.\").concat(model, \"\\n  },\");\n  methodList.push(str);\n}\n\nfunction buildexport(conf, type, data, rules, selectOptions, uploadVar, props, methods) {\n  var str = \"\".concat(exportDefault, \"{\\n  \").concat(inheritAttrs[type], \"\\n  components: {},\\n  props: [],\\n  data () {\\n    return {\\n      \").concat(conf.formModel, \": {\\n        \").concat(data, \"\\n      },\\n      \").concat(conf.formRules, \": {\\n        \").concat(rules, \"\\n      },\\n      \").concat(uploadVar, \"\\n      \").concat(selectOptions, \"\\n      \").concat(props, \"\\n    }\\n  },\\n  computed: {},\\n  watch: {},\\n  created () {},\\n  mounted () {},\\n  methods: {\\n    \").concat(methods, \"\\n  }\\n}\");\n  return str;\n}",null]}