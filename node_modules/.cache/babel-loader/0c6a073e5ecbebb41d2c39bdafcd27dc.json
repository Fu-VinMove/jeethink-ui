{"remainingRequest":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/thread-loader/dist/cjs.js!/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/babel-loader/lib/index.js!/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/utils/request.js","dependencies":[{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/utils/request.js","mtime":1590989844000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Notification, MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport errorCode from '@/utils/errorCode';\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'; // 创建axios实例\n\nvar service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: process.env.VUE_APP_BASE_API,\n  // 超时\n  timeout: 10000\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  // 是否需要设置 token\n  var isToken = (config.headers || {}).isToken === false;\n\n  if (getToken() && !isToken) {\n    config.headers['Authorization'] = 'Bearer ' + getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  return config;\n}, function (error) {\n  console.log(error);\n  Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (res) {\n  // 未设置状态码则默认成功状态\n  var code = res.data.code || 200; // 获取错误信息\n\n  var message = errorCode[code] || res.data.msg || errorCode['default'];\n\n  if (code === 401) {\n    MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n      confirmButtonText: '重新登录',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).then(function () {\n      store.dispatch('LogOut').then(function () {\n        location.reload(); // 为了重新实例化vue-router对象 避免bug\n      });\n    });\n  } else if (code === 500) {\n    Message({\n      message: message,\n      type: 'error'\n    });\n    return Promise.reject(new Error(message));\n  } else if (code !== 200) {\n    Notification.error({\n      title: message\n    });\n    return Promise.reject('error');\n  } else {\n    return res.data;\n  }\n}, function (error) {\n  console.log('err' + error);\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",null]}