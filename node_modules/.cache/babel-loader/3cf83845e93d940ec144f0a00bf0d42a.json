{"remainingRequest":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/thread-loader/dist/cjs.js!/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/babel-loader/lib/index.js!/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/utils/jeethink.js","dependencies":[{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/src/utils/jeethink.js","mtime":1591000916000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuwenmu/Downloads/jeethink前后分离开发框架/jeethink快速开发框架（前后分离）_V2.3/jeethink-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _typeof from \"/Users/fuwenmu/Downloads/jeethink\\u524D\\u540E\\u5206\\u79BB\\u5F00\\u53D1\\u6846\\u67B6/jeethink\\u5FEB\\u901F\\u5F00\\u53D1\\u6846\\u67B6\\uFF08\\u524D\\u540E\\u5206\\u79BB\\uFF09_V2.3/jeethink-ui/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n\n/**\r\n * 通用js方法封装处理\r\n * Copyright (c) 2019 jeethink\r\n */\nvar baseURL = process.env.VUE_APP_BASE_API; // 日期格式化\n\nexport function parseTime(time, pattern) {\n  if (arguments.length === 0 || !time) {\n    return null;\n  }\n\n  var format = pattern || '{y}-{m}-{d} {h}:{i}:{s}';\n  var date;\n\n  if (_typeof(time) === 'object') {\n    date = time;\n  } else {\n    if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n      time = parseInt(time);\n    } else if (typeof time === 'string') {\n      time = time.replace(new RegExp(/-/gm), '/');\n    }\n\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000;\n    }\n\n    date = new Date(time);\n  }\n\n  var formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  };\n  var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, function (result, key) {\n    var value = formatObj[key]; // Note: getDay() returns 0 on Sunday\n\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value];\n    }\n\n    if (result.length > 0 && value < 10) {\n      value = '0' + value;\n    }\n\n    return value || 0;\n  });\n  return time_str;\n} // 表单重置\n\nexport function resetForm(refName) {\n  if (this.$refs[refName]) {\n    this.$refs[refName].resetFields();\n  }\n} // 添加日期范围\n\nexport function addDateRange(params, dateRange) {\n  var search = params;\n  search.beginTime = \"\";\n  search.endTime = \"\";\n\n  if (null != dateRange && '' != dateRange) {\n    search.beginTime = this.dateRange[0];\n    search.endTime = this.dateRange[1];\n  }\n\n  return search;\n} // 回显数据字典\n\nexport function selectDictLabel(datas, value) {\n  var actions = [];\n  Object.keys(datas).map(function (key) {\n    if (datas[key].dictValue == '' + value) {\n      actions.push(datas[key].dictLabel);\n      return false;\n    }\n  });\n  return actions.join('');\n} // 通用下载方法\n\nexport function download(fileName) {\n  window.location.href = baseURL + \"/common/download?fileName=\" + encodeURI(fileName) + \"&delete=\" + true;\n} // 字符串格式化(%s )\n\nexport function sprintf(str) {\n  var args = arguments,\n      flag = true,\n      i = 1;\n  str = str.replace(/%s/g, function () {\n    var arg = args[i++];\n\n    if (typeof arg === 'undefined') {\n      flag = false;\n      return '';\n    }\n\n    return arg;\n  });\n  return flag ? str : '';\n} // 转换字符串，undefined,null等转化为\"\"\n\nexport function praseStrEmpty(str) {\n  if (!str || str == \"undefined\" || str == \"null\") {\n    return \"\";\n  }\n\n  return str;\n}\n/**\r\n * 构造树型结构数据\r\n * @param {*} data 数据源\r\n * @param {*} id id字段 默认 'id'\r\n * @param {*} parentId 父节点字段 默认 'parentId'\r\n * @param {*} children 孩子节点字段 默认 'children'\r\n * @param {*} rootId 根Id 默认 0\r\n */\n\nexport function handleTree(data, id, parentId, children, rootId) {\n  id = id || 'id';\n  parentId = parentId || 'parentId';\n  children = children || 'children';\n  rootId = rootId || 0; //对源数据深度克隆\n\n  var cloneData = JSON.parse(JSON.stringify(data)); //循环所有项\n\n  var treeData = cloneData.filter(function (father) {\n    var branchArr = cloneData.filter(function (child) {\n      //返回每一项的子级数组\n      return father[id] === child[parentId];\n    });\n    branchArr.length > 0 ? father.children = branchArr : ''; //返回第一层\n\n    return father[parentId] === rootId;\n  });\n  return treeData != '' ? treeData : data;\n}",null]}